class Solution {
public:
    int findMaxLength(vector<int>& nums) {
        //brute force aproach is to traverse the binary array one by one
        //and find the max length contigous subarray
        // 0,0,0,1,1,0,1
        //0 0
        //0 0 0
        //0 0 0 1
        //0 0 0 1 1
        //0 0 0 1 1 0
        //0 0 0 1 1 0 1
        //0 0
        //0 0 1
        //0 0 1 1 
        //0 0 1 1 0
        //0 0 1 1 0 1----this will be our answer
        
        //approach with hashing
        //store the current sum with it's index 
        //if the current sum is encountered then it means it's 
        //a contigous subarray of that size 
        //continue and find the max len
        unordered_map<int,int> hash;
        //here key corresponds to sum and value corresponds to index
        //treat 0  as -1
        int sum = 0;
        int maxSize = 0;
        if(nums.size() == 0)
            return maxSize;
        nums[0] == 0 ? sum = -1 : sum = 1;
        hash.insert(make_pair(sum,0));
        for(int i = 1; i < nums.size(); i++) {
            nums[i] == 0 ? sum += -1 : sum += 1;
            if(sum == 0) {
                maxSize = i + 1;
            }
            else if(hash.find(sum) != hash.end()) {
                if(maxSize < i - hash[sum])
                    maxSize = i - hash[sum];
            }
            hash.insert(make_pair(sum,i));
        }
        return maxSize;
    }
};