class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int K) {
        //approach
        //brute force......
        //in brute force we have to calculate
        //distance of each element and then we have to sort the array
        //based on the distance and return the k closet element
        //complexity will be O(NlogN)
        //can we optimise??
        //we can optimse using min heap....
        //why min heap??
        //because insertion in sorted order will always be logn
        //and in our case time complexity will be O(NlogK)
        priority_queue<pair<int,int>,vector<pair<int,int>>,comparator> minHeap;
        for(int i = 0; i < points.size(); i++) {
            int distance = getDistance(points[i][0],points[i][1]);
            minHeap.push(make_pair(distance,i));
            if(minHeap.size() > K)
                minHeap.pop();
        }
        vector<vector<int>> answer(K,vector<int>(2));
        int j = 0;
        while(!minHeap.empty()) {
            pair<int,int> a = minHeap.top();
            minHeap.pop();
            answer[j][0] = points[a.second][0];
            answer[j][1] = points[a.second][1];
            j++;
        }
        return answer;
    }
    
    int getDistance(int x, int y) {
        return (x*x + y*y);
    }
    
    struct comparator {
      bool operator() (pair<int,int> first, pair<int,int> second) {
          return first.first < second.first;
      }  
    };
};