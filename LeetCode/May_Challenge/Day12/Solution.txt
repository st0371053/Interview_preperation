class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
     //concept here is to use binary search with modification
    //if we observe we can find that if mid is even and element exist in left half then arr[mid] != arr[mid+1]
    //else equal then it will be in right half
    //similarly if element is odd then if arr[mid] == arr[mid -1]
    //then the element will be in right half else in left half
        int x = modifiedBinarySearch(nums);
        return x;
    }
    
    int modifiedBinarySearch(vector<int>& arr) {
        int lower = 0;
        int high = arr.size() - 1;
        while(lower <= high) {
            if(lower == high)
                return arr[lower];
            long int mid = (lower + high)/2;
            //cout<<lower<<" "<<mid<<" "<<high<<endl;
            if((mid % 2) == 0 && arr[mid] == arr[mid + 1]) {
                lower = mid + 1;
            }
            else if((mid % 2) != 0 && arr[mid] == arr[mid - 1]) {
                lower = mid + 1;
            }
            else
                high = mid;
        }
        return arr[lower];
    }
};