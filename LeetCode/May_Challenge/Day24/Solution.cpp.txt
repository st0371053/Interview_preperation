/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        TreeNode* root = createBstFromPreorder(preorder,0,preorder.size() - 1);
        return root;
    }
    //helper function
    TreeNode* createBstFromPreorder(vector<int>& preorder, int start, int end) {
        if(start > end) {
            return NULL;
        }
        TreeNode* root = new TreeNode(preorder[start]);
        if(start ==  end) {
            return root;
        }
        int index ;
        //finding the index of the element greater than the root to put it in right side
        for(index = start + 1; index <= end; index++) {
            if(preorder[index] > preorder[start]) {
                break;
            }
        }
        root->left = createBstFromPreorder(preorder,start + 1, index - 1);
        root->right = createBstFromPreorder(preorder,index,end);
        return root;
    }
};